server {
	listen 80;
	server_name htpc.home.arpa;

	location / {
		return 301 https://htpc.home.arpa$request_uri;
	}

}

server {
	listen 443 ssl;

	server_name htpc.home.arpa;

	ssl_certificate /etc/nginx/certs/home.arpa.crt;
	ssl_certificate_key /etc/nginx/certs/home.arpa.key;

	#
	# Sonarr
	#
	location /sonarr {
		proxy_pass http://127.0.0.1:8989;
	}

	# 
	# Radarr
	#
	location /radarr {
		proxy_pass http://127.0.0.1:7878;
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection $http_connection;

	}

	location /radarr/api { auth_request off;
		proxy_pass       http://127.0.0.1:7878/radarr/api;
	}

	location /radarr/Content { auth_request off;
		proxy_pass http://127.0.0.1:7878/radarr/Content;
	}


	#
	# Lidarr
	#
	location /lidarr {
		proxy_pass http://127.0.0.1:8686;
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection $http_connection;
	}


	#
	# Readarr
	#
	location /readarr {
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection $http_connection;
		proxy_pass http://127.0.0.1:8787;
	}


	#
	# Prowlarr
	#
	location /prowlarr {
		proxy_pass http://127.0.0.1:9696;
	}


	#
	# Overseerr
	#
	location ^~ /overseerr {
	    set $app 'overseerr';

	    # Remove /overseerr path to pass to the app
	    rewrite ^/overseerr/?(.*)$ /$1 break;
	    proxy_pass http://127.0.0.1:5055; # NO TRAILING SLASH

	    # Redirect location headers
	    proxy_redirect ^ /$app;
	    proxy_redirect /setup /$app/setup;
	    proxy_redirect /login /$app/login;

	    # Sub filters to replace hardcoded paths
	    proxy_set_header Accept-Encoding "";
	    sub_filter_once off;
	    sub_filter_types *;
	    sub_filter 'href="/"' 'href="/$app"';
	    sub_filter 'href="/login"' 'href="/$app/login"';
	    sub_filter 'href:"/"' 'href:"/$app"';
	    sub_filter '\/_next' '\/$app\/_next';
	    sub_filter '/_next' '/$app/_next';
	    sub_filter '/api/v1' '/$app/api/v1';
	    sub_filter '/login/plex/loading' '/$app/login/plex/loading';
	    sub_filter '/images/' '/$app/images/';
	    sub_filter '/android-' '/$app/android-';
	    sub_filter '/apple-' '/$app/apple-';
	    sub_filter '/favicon' '/$app/favicon';
	    sub_filter '/logo_' '/$app/logo_';
	    sub_filter '/site.webmanifest' '/$app/site.webmanifest';
	}

	#
	# Tautulli
	#
	location /tautulli {
		proxy_pass http://localhost:8181;
	}

	#
	# Petio
	#
	location /petio {
		proxy_pass http://127.0.0.1:7777;
	}

	# 
	# Plex
	#
	location /plex {
	    return 301 $scheme://$host/plex/;
	}

	location ^~ /plex/ {
	    rewrite /plex(.*) $1 break;
	    proxy_pass http://127.0.0.1:32400;
	    proxy_intercept_errors off;
	    proxy_set_header X-Plex-Client-Identifier $http_x_plex_client_identifier;
	    proxy_set_header X-Plex-Device $http_x_plex_device;
	    proxy_set_header X-Plex-Device-Name $http_x_plex_device_name;
	    proxy_set_header X-Plex-Platform $http_x_plex_platform;
	    proxy_set_header X-Plex-Platform-Version $http_x_plex_platform_version;
	    proxy_set_header X-Plex-Product $http_x_plex_product;
	    proxy_set_header X-Plex-Token $http_x_plex_token;
	    proxy_set_header X-Plex-Version $http_x_plex_version;
	    proxy_set_header X-Plex-Nocache $http_x_plex_nocache;
	    proxy_set_header X-Plex-Provides $http_x_plex_provides;
	    proxy_set_header X-Plex-Device-Vendor $http_x_plex_device_vendor;
	    proxy_set_header X-Plex-Model $http_x_plex_model;
	}

	if ($http_referer ~* /plex) {
	    rewrite ^/web/(.*) /plex/web/$1? redirect;
	}

	#
	# Sabnzbd
	#
	location /sabnzbd {
		proxy_pass http://127.0.0.1:28080;
		proxy_set_header Host $host;
		proxy_set_header X-Forwarded-Host $server_name;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Ssl on;
		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_read_timeout  90;
		proxy_redirect http://127.0.0.1:28080 https://$host;
	}

	#
	# Flood
	#
	location /flood {
		proxy_pass http://127.0.0.1:3333;
	}

	#
	# qBittorrent
	#
	location /qbit/ {
	    proxy_pass         http://127.0.0.1:8888/;
	    proxy_http_version 1.1;

	    proxy_set_header   Host               127.0.0.1:8888;
	    proxy_set_header   X-Forwarded-Host   $http_host;
	    proxy_set_header   X-Forwarded-For    $remote_addr;

	    # not used by qBittorrent
	    #proxy_set_header   X-Forwarded-Proto  $scheme;
	    #proxy_set_header   X-Real-IP          $remote_addr;

	    # optionally, you can adjust the POST request size limit, to allow adding a lot of torrents at once
	    #client_max_body_size 100M;

	    # Since v4.2.2, is possible to configure qBittorrent
	    # to set the "Secure" flag for the session cookie automatically.
	    # However, that option does nothing unless using qBittorrent's built-in HTTPS functionality.
	    # For this use case, where qBittorrent itself is using plain HTTP
	    # (and regardless of whether or not the external website uses HTTPS),
	    # the flag must be set here, in the proxy configuration itself.
	    # Note: If this flag is set while the external website uses only HTTP, this will cause
	    # the login mechanism to not work without any apparent errors in console/network resulting in "auth loops".
	    proxy_cookie_path  /                  "/; Secure";
	}
		
	#
	# Portainer
	#
	location /portainer/ {
		proxy_pass http://127.0.0.1:9000/;

	     proxy_http_version 1.1;
	     proxy_set_header   Host               $host:$server_port;
	     proxy_set_header   X-Real-IP          $remote_addr;
	     proxy_set_header   X-Forwarded-For    $proxy_add_x_forwarded_for;
	     proxy_set_header   X-Forwarded-Proto  $scheme;
	     proxy_set_header   Upgrade            $http_upgrade;
	     proxy_set_header   Connection         "upgrade";
	}

	# 
	# Organizr
	#
	location /organizr/ {
		proxy_pass http://127.0.0.1:38080/;
	}
}
